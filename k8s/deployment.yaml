
# This is a Kubernetes Deployment manifest.
# A Deployment is a Kubernetes object that manages a set of identical Pods.
# It ensures that a specified number of Pods are running and handles updates and rollbacks.

apiVersion: apps/v1
kind: Deployment
metadata:
  # The name of the Deployment object itself.
  name: taskmanager-app-deployment
spec:
  # `replicas` defines the desired number of running application instances (Pods).
  replicas: 1

  # The `selector` tells the Deployment which Pods to manage.
  # It finds Pods by matching their labels.
  selector:
    matchLabels:
      app: taskmanager-app

  # The `template` is the blueprint for the Pods that the Deployment will create.
  template:
    metadata:
      # These labels are applied to each Pod created from this template.
      # The `selector` above must match these labels.
      labels:
        app: taskmanager-app
    spec:
      # A Pod can contain one or more containers. We have one for our application.
      containers:
        - name: taskmanager-app-container
          # IMPORTANT: This is the Docker image that will be run.
          # Our CI/CD pipeline will dynamically replace this placeholder
          # with the actual image URL and tag from our Azure Container Registry (e.g., myacr.azurecr.io/taskmanager-app:commit-sha)
          image: YOUR_ACR_LOGIN_SERVER/taskmanager-app:latest

          # The port inside the container that the application listens on.
          ports:
            - containerPort: 8080

          # Environment variables that will be injected into the running container.
          # We use these to pass database connection details to the Spring Boot application.
          env:
            # The full JDBC URL for the database connection.
            # It uses another environment variable, $(DB_HOST), which we define below.
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://$(DB_HOST):5432/taskmanagerdb"

            # The database username.
            # Instead of writing the value directly, we fetch it from a Kubernetes Secret.
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  # This is the name of the Secret object we will create.
                  name: postgres-secret
                  # This is the key within the Secret whose value we want to use.
                  key: db-user

            # The database password, also fetched from the same Secret for security.
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: db-password

            # A helper environment variable to hold the database host FQDN.
            # This is also fetched from the Secret and used by SPRING_DATASOURCE_URL above.
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: db-host
